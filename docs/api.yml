openapi: 3.0.0
info:
  title: Appointment Sync API
  version: 1.0.0
  description: |
    Real-time appointment sync API for dental practice management systems.
    
    This API demonstrates:
    - Integration with third-party PMS systems
    - Data normalization from inconsistent formats
    - Unified appointment slot management
    - Basic Authentication and error handling
    
  contact:
    name: API Support
    email: info@dentistfinder.ai
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.dentistfinder.ai
    description: Production server

tags:
  - name: Health
    description: Health check and system status endpoints
  - name: Appointments
    description: Unified appointment management API
  - name: Mock API
    description: Simulated third-party PMS integration

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status and uptime of the API
      tags: [Health]
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: 'healthy'
                          uptime:
                            type: number
                            description: Server uptime in seconds
                            example: 3600.25
                          environment:
                            type: string
                            example: 'development'
                          timestamp:
                            type: string
                            format: date-time

  /api/available-slots:
    get:
      summary: Get available appointment slots (unified format)
      description: |
        Fetches appointment data from mock external API, normalizes inconsistent formats, 
        and returns unified appointment slots with optional filtering and pagination.
        
        **Data Flow:**
        1. Calls mock external PMS API with Basic Auth
        2. Receives data in 3 different messy formats (A, B, C)
        3. Normalizes all formats to unified structure
        4. Applies filters and pagination
        5. Returns clean, consistent response
        
      tags: [Appointments]
      parameters:
        - name: provider
          in: query
          description: Filter by healthcare provider name (case-insensitive partial match)
          required: false
          schema:
            type: string
            example: Dr. Smith
        - name: date
          in: query
          description: Filter by appointment date (YYYY-MM-DD format)
          required: false
          schema:
            type: string
            format: date
            example: '2025-07-20'
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of results per page (max 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
            example: 10
      responses:
        '200':
          description: Available appointment slots retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedSlot'
              examples:
                successful_response:
                  summary: Successful response with appointments
                  value:
                    success: true
                    data:
                      - date: "2025-07-20"
                        start_time: "09:00"
                        provider: "Dr. Smith"
                      - date: "2025-07-20"
                        start_time: "10:30"
                        provider: "Dr. Smith"
                      - date: "2025-07-21"
                        start_time: "10:00"
                        provider: "Dr. Lee"
                    message: "Available appointment slots"
                    pagination:
                      page: 1
                      limit: 10
                      total: 15
                      pages: 2
                filtered_response:
                  summary: Filtered by provider
                  value:
                    success: true
                    data:
                      - date: "2025-07-20"
                        start_time: "09:00"
                        provider: "Dr. Smith"
                      - date: "2025-07-20"
                        start_time: "10:30"
                        provider: "Dr. Smith"
                    message: "Available appointment slots"
                    pagination:
                      page: 1
                      limit: 10
                      total: 6
                      pages: 1
        '503':
          description: Service unavailable (external API error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                external_api_error:
                  summary: External API unavailable
                  value:
                    success: false
                    error: "Service unavailable"
                    message: "External API temporarily unavailable"

  /mock-external-api/slots:
    get:
      summary: Mock external PMS API endpoint
      description: |
        Simulates a third-party Practice Management System (PMS) API that returns 
        appointment data in intentionally inconsistent formats to demonstrate 
        real-world API integration challenges.
        
        **Returns 3 Different Messy Formats:**
        - Format A: Standard structure with date/times/doctor
        - Format B: Alternative structure with available_on/slots/provider  
        - Format C: Completely different structure with appointment_day/free_slots/physician_name
        
      tags: [Mock API]
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Mock appointment data in various inconsistent formats
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/MessyFormatA'
                            - $ref: '#/components/schemas/MessyFormatB'
                            - $ref: '#/components/schemas/MessyFormatC'
                      api_version:
                        type: string
                        example: '2.1'
                      timestamp:
                        type: string
                        format: date-time
                      total_records:
                        type: integer
                        example: 5
              examples:
                mixed_formats:
                  summary: Mixed format response
                  value:
                    success: true
                    data:
                      - date: "2025-07-20"
                        times: ["09:00", "10:30", "13:15"]
                        doctor:
                          name: "Dr. Smith"
                          id: "d1001"
                        type: "NewPatient"
                      - available_on: "2025/07/21"
                        slots:
                          - start: "10:00"
                            end: "10:30"
                          - start: "11:00"
                            end: "11:30"
                        provider: "Dr. Lee"
                        category: "General"
                      - appointment_day: "2025-07-22"
                        free_slots: ["08:30", "09:30", "11:15"]
                        physician_name: "Dr. Johnson"
                        physician_code: "d1003"
                        service_type: "Cleaning"
                        duration_minutes: 30
                    message: "Mock external API response"
                    api_version: "2.1"
                    timestamp: "2025-07-17T19:56:57.597Z"
                    total_records: 3
        '400':
          description: Bad Request - Invalid authorization format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_auth:
                  summary: Missing authorization header
                  value:
                    success: false
                    error: "Unauthorized"
                    message: "Authorization header required"
                invalid_auth_format:
                  summary: Invalid authorization format
                  value:
                    success: false
                    error: "Bad Request"
                    message: "Invalid Authorization header format"
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email/password
                  value:
                    success: false
                    error: "Unauthorized"
                    message: "Invalid username or password"
                wrong_auth_type:
                  summary: Wrong authentication type
                  value:
                    success: false
                    error: "Unauthorized"
                    message: "Basic Authentication required"
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: |
        Basic Authentication using email and password
        
        **Default credentials:**
        - Username: admin@example.com
        - Password: admin123

  schemas:
    # Core Response Schemas
    APIResponse:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          type: object
          description: Response data (varies by endpoint)
        message:
          type: string
          description: Human-readable message
          example: "Request successful"
        error:
          type: string
          description: Error type (only present on errors)
          example: "Bad Request"

    PaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMetadata'

    PaginationMetadata:
      type: object
      required: [page, limit, total, pages]
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 25
        pages:
          type: integer
          description: Total number of pages
          example: 3

    ErrorResponse:
      type: object
      required: [success, error, message]
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error category
          enum: 
            - "Bad Request"
            - "Unauthorized" 
            - "Not Found"
            - "Service unavailable"
          example: "Unauthorized"
        message:
          type: string
          description: Detailed error message
          example: "Invalid credentials"

    # Unified Data Schema
    UnifiedSlot:
      type: object
      required: [date, start_time, provider]
      description: Normalized appointment slot in unified format
      properties:
        date:
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          description: Appointment date in YYYY-MM-DD format
          example: '2025-07-20'
        start_time:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Appointment start time in HH:MM format (24-hour)
          example: '09:00'
        provider:
          type: string
          description: Healthcare provider name
          example: 'Dr. Smith'
          minLength: 1
          maxLength: 100

    # Messy Format Schemas (from external API)
    MessyFormatA:
      type: object
      description: First inconsistent format from mock external API
      required: [date, times, doctor, type]
      properties:
        date:
          type: string
          format: date
          example: '2025-07-20'
        times:
          type: array
          items:
            type: string
            pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: ['09:00', '10:30', '13:15']
          description: Available time slots
        doctor:
          type: object
          required: [name, id]
          properties:
            name:
              type: string
              example: 'Dr. Smith'
            id:
              type: string
              example: 'd1001'
        type:
          type: string
          example: 'NewPatient'
          description: Appointment type

    MessyFormatB:
      type: object
      description: Second inconsistent format from mock external API
      required: [available_on, slots, provider, category]
      properties:
        available_on:
          type: string
          description: Date in alternative format (YYYY/MM/DD)
          example: '2025/07/21'
        slots:
          type: array
          items:
            type: object
            required: [start, end]
            properties:
              start:
                type: string
                pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
                example: '10:00'
              end:
                type: string
                pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
                example: '10:30'
          description: Time slots with start and end times
        provider:
          type: string
          example: 'Dr. Lee'
          description: Provider name (different field name than Format A)
        category:
          type: string
          example: 'General'
          description: Service category

    MessyFormatC:
      type: object
      description: Third inconsistent format from mock external API
      required: [appointment_day, free_slots, physician_name, physician_code, service_type, duration_minutes]
      properties:
        appointment_day:
          type: string
          format: date
          example: '2025-07-22'
          description: Yet another date field name
        free_slots:
          type: array
          items:
            type: string
            pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: ['08:30', '09:30', '11:15']
          description: Available slots (different field name)
        physician_name:
          type: string
          example: 'Dr. Johnson'
          description: Doctor name with different field name
        physician_code:
          type: string
          example: 'd1003'
          description: Doctor identifier
        service_type:
          type: string
          example: 'Cleaning'
          description: Type of service
        duration_minutes:
          type: integer
          example: 30
          description: Appointment duration